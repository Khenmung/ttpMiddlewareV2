// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ttpMiddleware.Models;

namespace ttpMiddleware.Migrations
{
    [DbContext(typeof(ttpauthContext))]
    [Migration("20220521103304_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ttpMiddleware.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ttpMiddleware.Models.AccountingLedgerTrialBalance", b =>
                {
                    b.Property<int>("LedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralLedgerId")
                        .HasColumnType("int");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int?>("StudentClassId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDebit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("LedgerId")
                        .HasName("PK_StudentTeachLedger");

                    b.HasIndex("BatchId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GeneralLedgerId");

                    b.HasIndex("OrgId");

                    b.HasIndex("StudentClassId");

                    b.ToTable("AccountingLedgerTrialBalance");
                });

            modelBuilder.Entity("ttpMiddleware.Models.AccountingVoucher", b =>
                {
                    b.Property<int>("AccountingVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short?>("ClassFeeId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("DebitCreditId")
                        .HasColumnType("tinyint")
                        .HasComment("0 = debit, 1 = credit");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DocDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FeeReceiptId")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralLedgerAccountId")
                        .HasColumnType("int");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reference")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<short?>("SubOrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AccountingVoucherId");

                    b.HasIndex("ClassFeeId");

                    b.HasIndex("FeeReceiptId");

                    b.HasIndex("GeneralLedgerAccountId");

                    b.HasIndex("LedgerId");

                    b.HasIndex("OrgId");

                    b.ToTable("AccountingVouchers");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Album", b =>
                {
                    b.Property<short>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("AlbumName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatableName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("AlbumId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("ttpMiddleware.Models.AppUser", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte?>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<short?>("CreatedBy")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short?>("LocationId")
                        .HasColumnType("smallint");

                    b.Property<short?>("ManagerId")
                        .HasColumnType("smallint");

                    b.Property<short?>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<short?>("UpdatedBy")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("ApplicationUserId")
                        .HasName("PK_ApplicationUsers");

                    b.HasIndex("OrgId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ApplicationFeatureRolesPerm", b =>
                {
                    b.Property<int>("ApplicationFeatureRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short?>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<short?>("PermissionId")
                        .HasColumnType("smallint");

                    b.Property<short>("PlanFeatureId")
                        .HasColumnType("smallint");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ApplicationFeatureRoleId")
                        .HasName("PK_ApplicationRolePerm");

                    b.HasIndex("PlanFeatureId");

                    b.ToTable("ApplicationFeatureRolesPerm");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ApplicationPrice", b =>
                {
                    b.Property<short>("ApplicationPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<byte>("MinCount")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("decimal(6,2)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<byte>("PCPM")
                        .HasColumnType("tinyint")
                        .HasComment("Per count (student, employee) per mont");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ApplicationPriceId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OrgId");

                    b.ToTable("ApplicationPrice");
                });

            modelBuilder.Entity("ttpMiddleware.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex")
                        .HasDatabaseName("EmailIndex1");

                    b.ToTable("AspNetUser");
                });

            modelBuilder.Entity("ttpMiddleware.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserToken");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AttendanceDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("AttendanceStatus")
                        .HasColumnType("tinyint");

                    b.Property<short?>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int?>("ClassSubjectId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short?>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("StudentClassId")
                        .HasColumnType("int");

                    b.Property<short?>("TeacherId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AttendanceId");

                    b.HasIndex("BatchId");

                    b.HasIndex("ClassSubjectId");

                    b.HasIndex("OrgId");

                    b.HasIndex("StudentClassId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("ttpMiddleware.Models.AttendanceReport", b =>
                {
                    b.Property<int>("AttendanceReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<short>("FinancialYear")
                        .HasColumnType("smallint");

                    b.Property<byte>("Holiday")
                        .HasColumnType("tinyint");

                    b.Property<byte>("LeaveAjusted")
                        .HasColumnType("tinyint");

                    b.Property<byte>("LossOfPay")
                        .HasColumnType("tinyint");

                    b.Property<int>("MonthYear")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<byte>("PaidDays")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Presents")
                        .HasColumnType("tinyint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("WeekOffs")
                        .HasColumnType("tinyint");

                    b.HasKey("AttendanceReportId");

                    b.HasIndex("FinancialYear");

                    b.HasIndex("OrgId");

                    b.ToTable("AttendanceReports");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Batch", b =>
                {
                    b.Property<short>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("BatchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("CurrentBatch")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BatchId");

                    b.HasIndex("OrgId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassEvaluation", b =>
                {
                    b.Property<int>("ClassEvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ClassEvaluationAnswerOptionParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<decimal>("DisplayOrder")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("EvaluationMasterId")
                        .HasColumnType("int");

                    b.Property<byte>("MultipleAnswer")
                        .HasColumnType("tinyint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("QuestionnaireTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ClassEvaluationId");

                    b.HasIndex("ClassEvaluationAnswerOptionParentId");

                    b.HasIndex("EvaluationMasterId");

                    b.ToTable("ClassEvaluation");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassEvaluationOption", b =>
                {
                    b.Property<int>("ClassEvaluationAnswerOptionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ClassEvaluationId")
                        .HasColumnType("int");

                    b.Property<byte?>("Correct")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte?>("Point")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("ClassEvaluationAnswerOptionsId");

                    b.HasIndex("ClassEvaluationId");

                    b.ToTable("ClassEvaluationOptions");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassFee", b =>
                {
                    b.Property<short>("ClassFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,0)");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("FeeDefinitionId")
                        .HasColumnType("smallint");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<byte?>("PaymentOrder")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Recurring")
                        .HasColumnType("tinyint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ClassFeeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeeDefinitionId");

                    b.ToTable("ClassFee");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassGroupMapping", b =>
                {
                    b.Property<short>("ClassGroupMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ClassGroupMappingId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassGroupMapping");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassMaster", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short?>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DurationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("MaxStudent")
                        .HasColumnType("smallint");

                    b.Property<byte?>("MinStudent")
                        .HasColumnType("tinyint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Sequence")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StudyAreaId")
                        .HasColumnType("int");

                    b.Property<int?>("StudyModeId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ClassId");

                    b.ToTable("ClassMasters");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassPrerequisite", b =>
                {
                    b.Property<short>("PrerequisiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("PrerequisiteId");

                    b.HasIndex("ClassId");

                    b.HasIndex("OrgId");

                    b.ToTable("ClassPrerequisites");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassSubject", b =>
                {
                    b.Property<int>("ClassSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short?>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("Credits")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<short>("SubjectTypeId")
                        .HasColumnType("smallint");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ClassSubjectId");

                    b.HasIndex("BatchId");

                    b.HasIndex("ClassId");

                    b.HasIndex("OrgId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("SubjectTypeId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassSubject");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassSubjectMarkComponent", b =>
                {
                    b.Property<short>("ClassSubjectMarkComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassSubjectId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short?>("ExamId")
                        .HasColumnType("smallint");

                    b.Property<short>("FullMark")
                        .HasColumnType("smallint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<short>("PassMark")
                        .HasColumnType("smallint");

                    b.Property<int>("SubjectComponentId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ClassSubjectMarkComponentId");

                    b.HasIndex("BatchId");

                    b.HasIndex("ClassSubjectId");

                    b.HasIndex("OrgId");

                    b.HasIndex("SubjectComponentId");

                    b.ToTable("ClassSubjectMarkComponents");
                });

            modelBuilder.Entity("ttpMiddleware.Models.CourseYearSemester", b =>
                {
                    b.Property<int>("CourseYearSemesterId")
                        .HasColumnType("int");

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<byte>("BatchId")
                        .HasColumnType("tinyint");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("CourseYearSemesterId");

                    b.HasIndex("ClassId");

                    b.ToTable("CourseYearSemester");
                });

            modelBuilder.Entity("ttpMiddleware.Models.CustomerInvoice", b =>
                {
                    b.Property<int>("CustomerInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("CustomerId")
                        .HasColumnType("smallint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("DueForMonth")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentClassId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CustomerInvoiceId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrgId");

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("CustomerInvoice");
                });

            modelBuilder.Entity("ttpMiddleware.Models.CustomerInvoiceComponent", b =>
                {
                    b.Property<int>("CustomerInvoiceComponentId")
                        .HasColumnType("int");

                    b.Property<byte?>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerInvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("InvoiceComponentId")
                        .HasColumnType("int");

                    b.Property<short?>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CustomerInvoiceComponentId");

                    b.ToTable("CustomerInvoiceComponents");
                });

            modelBuilder.Entity("ttpMiddleware.Models.CustomerInvoiceItem", b =>
                {
                    b.Property<int>("CustomerInvoiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ClassFeeId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("CustomerAppItemId")
                        .HasColumnType("smallint");

                    b.Property<int>("CustomerInvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("InventoryItemId")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CustomerInvoiceItemId");

                    b.HasIndex("CustomerAppItemId");

                    b.HasIndex("CustomerInvoiceId");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("OrgId");

                    b.ToTable("CustomerInvoiceItems");
                });

            modelBuilder.Entity("ttpMiddleware.Models.CustomerPlan", b =>
                {
                    b.Property<short>("CustomerPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("AmountPerMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Formula")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<short>("LoginUserCount")
                        .HasColumnType("smallint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<short>("PersonOrItemCount")
                        .HasColumnType("smallint");

                    b.Property<short>("PlanId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CustomerPlanId");

                    b.HasIndex("OrgId");

                    b.HasIndex("PlanId");

                    b.ToTable("CustomerPlans");
                });

            modelBuilder.Entity("ttpMiddleware.Models.CustomerPlanFeature", b =>
                {
                    b.Property<short>("CustomerPlanFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<short>("PlanId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CustomerPlanFeatureId");

                    b.HasIndex("PlanId");

                    b.ToTable("CustomerPlanFeatures");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpComponent", b =>
                {
                    b.Property<int>("EmpSalaryComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<int>("ComponentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FormulaOrAmount")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("SalaryComponent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmpSalaryComponentId")
                        .HasName("PK_EmpEmployeeSalary");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("OrgId");

                    b.ToTable("EmpComponents");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpEmployee", b =>
                {
                    b.Property<int>("EmpEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AadharNo")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("AdhaarNo")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("AlternateContactNo")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("BankAccountNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("BloodgroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DOJ")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("EmergencyContactNo")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<int?>("EmpGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("EmploymentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("EmploymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("IFSCcode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("MICRNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("MaritalStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("MarriedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MotherName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("NatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("NoticePeriodDays")
                        .HasColumnType("smallint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("PAN")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("PFAccountNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PassportNo")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("PermanentAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("PermanentAddressCityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PermanentAddressCountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PermanentAddressPincode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("PermanentAddressStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PresentAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("PresentAddressCityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PresentAddressCountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PresentAddressPincode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("PresentAddressStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("ProbationPeriodDays")
                        .HasColumnType("smallint");

                    b.Property<int?>("ReligionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<short?>("SubOrgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WhatsappNo")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<int?>("WorkAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("EmpEmployeeId");

                    b.ToTable("EmpEmployees");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpEmployeeGradeSalHistory", b =>
                {
                    b.Property<short>("EmployeeGradeHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ApprovedBy")
                        .HasColumnType("smallint");

                    b.Property<decimal>("CTC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int");

                    b.Property<int>("EmpGradeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("IsCurrent")
                        .HasColumnType("tinyint");

                    b.Property<short?>("JobTitleId")
                        .HasColumnType("smallint");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("ReportingTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("WorkAccountId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeGradeHistoryId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmpGradeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OrgId");

                    b.HasIndex("WorkAccountId");

                    b.ToTable("EmpEmployeeGradeSalHistory");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpEmployeeGroup", b =>
                {
                    b.Property<short>("EmployeeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ApprovedBy")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<short?>("DesignationId")
                        .HasColumnType("smallint");

                    b.Property<short>("EmpGradeId")
                        .HasColumnType("smallint");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("GroupTypeId")
                        .HasColumnType("smallint");

                    b.Property<short?>("JobTitleId")
                        .HasColumnType("smallint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<short?>("SubOrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("WorkAccountId")
                        .HasColumnType("smallint");

                    b.HasKey("EmployeeGroupId")
                        .HasName("PK_EmpEmployeeGroup");

                    b.HasIndex("OrgId");

                    b.HasIndex("SubOrgId");

                    b.ToTable("EmpEmployeeGroups");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpEmployeeSalaryComponent", b =>
                {
                    b.Property<int>("EmployeeSalaryComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("ActualFormulaOrAmount")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short?>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EmpComponentId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<byte>("Month")
                        .HasColumnType("tinyint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RealeasedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmployeeSalaryComponentId")
                        .HasName("PK_EmployeeSalary");

                    b.HasIndex("EmpComponentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrgId");

                    b.ToTable("EmpEmployeeSalaryComponents");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpEmployeeSkill", b =>
                {
                    b.Property<int>("EmpEmployeeSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<short>("ExperienceInMonths")
                        .HasColumnType("smallint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<short>("SkillId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmpEmployeeSkillId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrgId");

                    b.ToTable("EmpEmployeeSkills");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpManagerGroupMapping", b =>
                {
                    b.Property<short>("ManagerGroupMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("EmployeeGroupId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<short>("ManagerEmployeeId")
                        .HasColumnType("smallint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ManagerGroupMappingId")
                        .HasName("PK_ManagerTeacherGroupMapping");

                    b.ToTable("EmpManagerGroupMapping");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpWorkHistory", b =>
                {
                    b.Property<int>("EmpWorkHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Designation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Responsibility")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmpWorkHistoryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrgId");

                    b.ToTable("EmpWorkHistory");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmployeeActivity", b =>
                {
                    b.Property<int>("EmployeeActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeActivityCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeActivitySubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("Remarks")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmployeeActivityId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeActivity");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmployeeEducationHistory", b =>
                {
                    b.Property<int>("EmployeeEducationHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("BoardName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<short>("FromYear")
                        .HasColumnType("smallint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<short>("PercentageObtained")
                        .HasColumnType("smallint");

                    b.Property<short>("ToYear")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmployeeEducationHistoryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrgId");

                    b.ToTable("EmployeeEducationHistory");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmployeeEvaluation", b =>
                {
                    b.Property<int>("EmployeeEvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<byte?>("DisplayOrder")
                        .HasColumnType("tinyint");

                    b.Property<int>("EmployeeEvaluationCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeEvaluationSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int?>("RatingOptionId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmployeeEvaluationId");

                    b.ToTable("EmployeeEvaluation");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmployeeEvaluationDetail", b =>
                {
                    b.Property<int>("EmployeeEvalDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("EmployeeEvaluationId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EvaluatedBy")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int?>("RatingId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("EmployeeEvalDetailId");

                    b.HasIndex("EmployeeEvaluationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeEvaluationDetail");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmployeeFamily", b =>
                {
                    b.Property<int>("EmployeeFamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Age")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("FamilyRelationShipId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmployeeFamilyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FamilyRelationShipId");

                    b.HasIndex("Gender");

                    b.HasIndex("OrgId");

                    b.ToTable("EmployeeFamily");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmployeeMonthlySalary", b =>
                {
                    b.Property<short>("EmployeeMonthlySalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Deduction")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Gross")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<short>("PresentDays")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Released")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("SalaryMonth")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmployeeMonthlySalaryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrgId");

                    b.ToTable("EmployeeMonthlySalary");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ErrorLog", b =>
                {
                    b.Property<int>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ModuleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ErrorId");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EvaluationClassSubjectMap", b =>
                {
                    b.Property<int>("EvaluationClassSubjectMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("ClassGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EvaluationMasterId")
                        .HasColumnType("int");

                    b.Property<short?>("ExamId")
                        .HasColumnType("smallint");

                    b.Property<short?>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EvaluationClassSubjectMapId");

                    b.HasIndex("ClassGroupId");

                    b.HasIndex("EvaluationMasterId");

                    b.HasIndex("OrgId");

                    b.ToTable("EvaluationClassSubjectMap");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EvaluationMaster", b =>
                {
                    b.Property<int>("EvaluationMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("DisplayResult")
                        .HasColumnType("bit");

                    b.Property<string>("Duration")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("EvaluationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte?>("FullMark")
                        .HasColumnType("tinyint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<byte?>("PassMark")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("ProvideCertificate")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EvaluationMasterId");

                    b.ToTable("EvaluationMaster");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EvaluationName", b =>
                {
                    b.Property<int>("EvaluationMasterId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("DisplayResult")
                        .HasColumnType("bit");

                    b.Property<string>("Duration")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("EvaluationName1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EvaluationName");

                    b.Property<byte?>("FullMark")
                        .HasColumnType("tinyint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<byte?>("PassMark")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("ProvideCertificate")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EvaluationMasterId")
                        .HasName("PK_EvaluationName_1");

                    b.ToTable("EvaluationName");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Broadcasted")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("EventEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("EventStartDate")
                        .HasColumnType("datetime");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("Participants")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.HasKey("EventId");

                    b.HasIndex("BatchId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Exam", b =>
                {
                    b.Property<short>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short?>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassGroupId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ExamNameId")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("ReleaseResult")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ExamId");

                    b.HasIndex("BatchId");

                    b.HasIndex("ExamNameId");

                    b.HasIndex("OrgId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ExamSlot", b =>
                {
                    b.Property<short>("ExamSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime");

                    b.Property<short>("ExamId")
                        .HasColumnType("smallint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("SlotNameId")
                        .HasColumnType("smallint");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ExamSlotId");

                    b.HasIndex("BatchId");

                    b.HasIndex("ExamId");

                    b.HasIndex("OrgId");

                    b.ToTable("ExamSlot");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ExamStudentResult", b =>
                {
                    b.Property<int>("ExamStudentResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("ExamId")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExamStatusId")
                        .HasColumnType("int");

                    b.Property<byte?>("FailCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("Grade")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("MarkPercent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<byte?>("PassCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("Rank")
                        .HasColumnType("smallint");

                    b.Property<int>("StudentClassId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalMarks")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ExamStudentResultId");

                    b.HasIndex("BatchId");

                    b.HasIndex("ExamId");

                    b.HasIndex("Grade");

                    b.HasIndex("OrgId");

                    b.HasIndex("StudentClassId");

                    b.ToTable("ExamStudentResult");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ExamStudentSubjectResult", b =>
                {
                    b.Property<int>("ExamStudentSubjectResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<short>("ClassSubjectMarkComponentId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("ExamId")
                        .HasColumnType("smallint");

                    b.Property<int>("ExamStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("Marks")
                        .HasColumnType("decimal(10,2)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("StudentClassId")
                        .HasColumnType("int");

                    b.Property<int>("StudentClassSubjectId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ExamStudentSubjectResultId");

                    b.HasIndex("BatchId");

                    b.HasIndex("ClassSubjectMarkComponentId");

                    b.HasIndex("ExamId");

                    b.HasIndex("ExamStatus");

                    b.HasIndex("OrgId");

                    b.HasIndex("StudentClassId");

                    b.HasIndex("StudentClassSubjectId");

                    b.ToTable("ExamStudentSubjectResult");
                });

            modelBuilder.Entity("ttpMiddleware.Models.FeeDefinition", b =>
                {
                    b.Property<short>("FeeDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AmountEditable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("FeeCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("FeeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("FeeSubCategoryId")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("FeeDefinitionId");

                    b.HasIndex("FeeCategoryId");

                    b.ToTable("FeeDefinition");
                });

            modelBuilder.Entity("ttpMiddleware.Models.GeneralLedger", b =>
                {
                    b.Property<int>("GeneralLedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountGroupId")
                        .HasColumnType("int");

                    b.Property<int>("AccountNatureId")
                        .HasColumnType("int");

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GeneralLedgerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("GeneralLedgerId");

                    b.HasIndex("AccountGroupId");

                    b.HasIndex("AccountNatureId");

                    b.ToTable("GeneralLedger");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Holiday", b =>
                {
                    b.Property<int>("HolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short?>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("HolidayTypeId")
                        .HasColumnType("int");

                    b.Property<short?>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("HolidayId");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("ttpMiddleware.Models.InventoryItem", b =>
                {
                    b.Property<int>("InventoryItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<short?>("MinCount")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("PPP")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price per Piece");

                    b.Property<decimal>("PPU")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price per unit");

                    b.Property<short?>("QtyPerUnit")
                        .HasColumnType("smallint");

                    b.Property<string>("SKU")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("InventoryItemId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrgId");

                    b.HasIndex("UnitId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("ttpMiddleware.Models.InvoiceComponent", b =>
                {
                    b.Property<short>("InvoiceComponentId")
                        .HasColumnType("smallint");

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerInvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("InvoiceComponentId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("CustomerInvoiceId");

                    b.HasIndex("OrgId");

                    b.ToTable("InvoiceComponents");
                });

            modelBuilder.Entity("ttpMiddleware.Models.LeaveBalance", b =>
                {
                    b.Property<int>("LeaveBalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("LeavePolicyId")
                        .HasColumnType("int");

                    b.Property<byte>("NoOfDays")
                        .HasColumnType("tinyint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("YearMonth")
                        .HasColumnType("smallint");

                    b.HasKey("LeaveBalanceId");

                    b.HasIndex("BatchId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeavePolicyId");

                    b.HasIndex("OrgId");

                    b.ToTable("LeaveBalances");
                });

            modelBuilder.Entity("ttpMiddleware.Models.LeaveEmployeeLeaf", b =>
                {
                    b.Property<int>("EmployeeLeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ApplyDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ApproveRejectedDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("ApprovedBy")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LeaveFrom")
                        .HasColumnType("date");

                    b.Property<string>("LeaveReason")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("LeaveStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LeaveTo")
                        .HasColumnType("date");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<short>("NoOfDays")
                        .HasColumnType("smallint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmployeeLeaveId")
                        .HasName("PK_EmployeeLeaves");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveStatusId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("OrgId");

                    b.ToTable("LeaveEmployeeLeaves");
                });

            modelBuilder.Entity("ttpMiddleware.Models.LeavePolicy", b =>
                {
                    b.Property<int>("LeavePolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FormulaOrDays")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("LeaveNameId")
                        .HasColumnType("int");

                    b.Property<int>("LeaveOpenAdjustCloseId")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("LeavePolicyId");

                    b.HasIndex("BatchId");

                    b.HasIndex("LeaveNameId");

                    b.HasIndex("LeaveOpenAdjustCloseId");

                    b.HasIndex("OrgId");

                    b.ToTable("LeavePolicy");
                });

            modelBuilder.Entity("ttpMiddleware.Models.MasterItem", b =>
                {
                    b.Property<int>("MasterDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ApplicationId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short?>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<short?>("LocationId")
                        .HasColumnType("smallint");

                    b.Property<string>("Logic")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("MasterDataName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<short?>("ParentId")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Sequence")
                        .HasColumnType("tinyint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("MasterDataId")
                        .HasName("PK_MasterData");

                    b.HasIndex("OrgId");

                    b.ToTable("MasterItems");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Message", b =>
                {
                    b.Property<short>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("MessageId");

                    b.HasIndex("OrgId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ttpMiddleware.Models.News", b =>
                {
                    b.Property<byte?>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Organization", b =>
                {
                    b.Property<short>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<short?>("City")
                        .HasColumnType("smallint");

                    b.Property<string>("Contact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short?>("Country")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<short?>("MainOrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short?>("ParentId")
                        .HasColumnType("smallint");

                    b.Property<short?>("State")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("ttpMiddleware.Models.OrganizationPayment", b =>
                {
                    b.Property<int>("OrganizationPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountPerMonth")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<short>("OrganizationPlanId")
                        .HasColumnType("smallint");

                    b.Property<short>("PaidMonths")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentMode")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("OrganizationPaymentId");

                    b.HasIndex("OrgId");

                    b.HasIndex("OrganizationPlanId");

                    b.HasIndex("PaymentMode");

                    b.ToTable("OrganizationPayment");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Page", b =>
                {
                    b.Property<short>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short?>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("FullPath")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte?>("HasSubmenu")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("HomePage")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("IsTemplate")
                        .HasColumnType("tinyint");

                    b.Property<short?>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("PageTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<short>("ParentId")
                        .HasColumnType("smallint");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<byte?>("PlanId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("faIcon")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("PageId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("OrgId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("ttpMiddleware.Models.PageHistory", b =>
                {
                    b.Property<short>("PageHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short?>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("PageBody")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PageLeft")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("PageRight")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<short>("ParentPageId")
                        .HasColumnType("smallint");

                    b.Property<byte>("Published")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("Version")
                        .HasColumnType("tinyint");

                    b.HasKey("PageHistoryId");

                    b.HasIndex("OrgId");

                    b.HasIndex("ParentPageId");

                    b.ToTable("PageHistory");
                });

            modelBuilder.Entity("ttpMiddleware.Models.PhotoGallery", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short?>("AlbumId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<byte?>("PhotoOrFile")
                        .HasColumnType("tinyint");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.HasKey("PhotoId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("OrgId");

                    b.ToTable("PhotoGallery");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Plan", b =>
                {
                    b.Property<short>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Logic")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<short?>("MinCount")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PCPM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("PlanId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("ttpMiddleware.Models.PlanAndMasterItem", b =>
                {
                    b.Property<short>("PlanAndMasterDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("ApplicationId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("MasterDataId")
                        .HasColumnType("int");

                    b.Property<short>("PlanId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("PlanAndMasterDataId")
                        .HasName("PK_PlanAndMasterData");

                    b.HasIndex("MasterDataId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanAndMasterItem");
                });

            modelBuilder.Entity("ttpMiddleware.Models.PlanFeature", b =>
                {
                    b.Property<short>("PlanFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ApplicationId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("PageId")
                        .HasColumnType("smallint");

                    b.Property<short>("PlanId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("PlanFeatureId");

                    b.HasIndex("PageId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanFeatures");
                });

            modelBuilder.Entity("ttpMiddleware.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Token")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_RefreshTokens_UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ReportConfigItem", b =>
                {
                    b.Property<int>("ReportConfigItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<byte?>("ColumnSequence")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DropdownId")
                        .HasColumnType("int");

                    b.Property<string>("Formula")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<short?>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TableNames")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReportConfigItemId");

                    b.ToTable("ReportConfigItems");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ReportOrgReportColumn", b =>
                {
                    b.Property<short>("ReportOrgReportColumnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("ColumnDisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FormulaOrColumnName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<short>("ReportOrgReportNameId")
                        .HasColumnType("smallint");

                    b.Property<byte>("Sequence")
                        .HasColumnType("tinyint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ReportOrgReportColumnId");

                    b.HasIndex("OrgId");

                    b.HasIndex("ReportOrgReportNameId");

                    b.ToTable("ReportOrgReportColumns");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ReportOrgReportName", b =>
                {
                    b.Property<short>("ReportOrgReportNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("ReportConfigDataId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserReportName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ReportOrgReportNameId");

                    b.HasIndex("OrgId");

                    b.HasIndex("ReportConfigDataId");

                    b.ToTable("ReportOrgReportNames");
                });

            modelBuilder.Entity("ttpMiddleware.Models.RoleUser", b =>
                {
                    b.Property<short>("RoleUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short?>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short?>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<short?>("LocationId")
                        .HasColumnType("smallint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleUserId");

                    b.HasIndex("BatchId");

                    b.HasIndex("OrgId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("ttpMiddleware.Models.SchoolClassPeriod", b =>
                {
                    b.Property<int>("SchoolClassPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FromToTime")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodTypeId")
                        .HasColumnType("int");

                    b.Property<byte>("Sequence")
                        .HasColumnType("tinyint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("SchoolClassPeriodId");

                    b.HasIndex("ClassId");

                    b.ToTable("SchoolClassPeriods");
                });

            modelBuilder.Entity("ttpMiddleware.Models.SchoolFeeType", b =>
                {
                    b.Property<short>("FeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("DefaultType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("FeeTypeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("FeeTypeId")
                        .HasName("PK_FeeTypes");

                    b.ToTable("SchoolFeeTypes");
                });

            modelBuilder.Entity("ttpMiddleware.Models.SchoolTimeTable", b =>
                {
                    b.Property<int>("TimeTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("ClassSubjectId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("SchoolClassPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("TimeTableId");

                    b.HasIndex("BatchId");

                    b.HasIndex("ClassId");

                    b.HasIndex("ClassSubjectId");

                    b.HasIndex("OrgId");

                    b.HasIndex("SchoolClassPeriodId");

                    b.ToTable("SchoolTimeTable");
                });

            modelBuilder.Entity("ttpMiddleware.Models.SlotAndClassSubject", b =>
                {
                    b.Property<int>("SlotClassSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassSubjectId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<short>("SlotId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("SlotClassSubjectId")
                        .HasName("PK_SlotAndClassSubjectId");

                    b.HasIndex("BatchId");

                    b.HasIndex("ClassSubjectId");

                    b.HasIndex("OrgId");

                    b.HasIndex("SlotId");

                    b.ToTable("SlotAndClassSubject");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StorageFnP", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short?>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("DocTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<byte?>("FileOrFolder")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("FileOrPhoto")
                        .HasColumnType("tinyint");

                    b.Property<short?>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<string>("Parent")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentClassId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedFileFolderName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.HasKey("FileId")
                        .HasName("PK_FilesNPhotos");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrgId");

                    b.HasIndex("StudentClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("StorageFnP");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudTeacherClassMapping", b =>
                {
                    b.Property<int>("TeacherClassMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TeacherClassMappingId");

                    b.HasIndex("BatchId");

                    b.HasIndex("ClassId");

                    b.HasIndex("OrgId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudTeacherClassMapping");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AadharNo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("AlternateContact")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("BankAccountNo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<short?>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int?>("BloodgroupId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<short?>("ClassAdmissionSought")
                        .HasColumnType("smallint");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ContactPersonContactNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FatherContactNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FatherName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FatherOccupation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("IFSCCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastSchoolPercentage")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("MICRNo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("MotherContactNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MotherName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MotherOccupation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameOfContactPerson")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ParentDeclaration")
                        .HasColumnType("tinyint");

                    b.Property<string>("PermanentAddress")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("PermanentAddressCityId")
                        .HasColumnType("int");

                    b.Property<int?>("PermanentAddressCountryId")
                        .HasColumnType("int");

                    b.Property<string>("PermanentAddressPincode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("PermanentAddressStateId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PresentAddress")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("PresentAddressCityId")
                        .HasColumnType("int");

                    b.Property<int?>("PresentAddressCountryId")
                        .HasColumnType("int");

                    b.Property<int?>("PresentAddressStateId")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryContactFatherOrMother")
                        .HasColumnType("int");

                    b.Property<int?>("ReasonForLeavingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RelationWithContactPerson")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<byte?>("StudentDeclaration")
                        .HasColumnType("tinyint");

                    b.Property<string>("TransferFromSchool")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TransferFromSchoolBoard")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WhatsAppNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("StudentId");

                    b.HasIndex("BloodgroupId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GenderId");

                    b.HasIndex("OrgId");

                    b.HasIndex("PermanentAddressCityId");

                    b.HasIndex("PermanentAddressCountryId");

                    b.HasIndex("PermanentAddressStateId");

                    b.HasIndex("ReasonForLeavingId");

                    b.HasIndex("ReligionId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentActivity", b =>
                {
                    b.Property<short>("StudentActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("Activity")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("ActivityDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("StudentClassId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("TeacherId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("StudentActivityId");

                    b.HasIndex("BatchId");

                    b.HasIndex("OrgId");

                    b.HasIndex("StudentClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentActivity");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentCertificate", b =>
                {
                    b.Property<int>("StudentCertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<short>("CertificateTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("StudentClassId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("StudentCertificateId");

                    b.HasIndex("BatchId");

                    b.HasIndex("OrgId");

                    b.HasIndex("StudentClassId");

                    b.ToTable("StudentCertificate");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentClass", b =>
                {
                    b.Property<int>("StudentClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("AdmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseYearId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short?>("FeeTypeId")
                        .HasColumnType("smallint");

                    b.Property<int?>("HouseId")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte?>("Promoted")
                        .HasColumnType("tinyint");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RollNo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<short?>("SectionId")
                        .HasColumnType("smallint");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("StudentClassId");

                    b.HasIndex("BatchId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeeTypeId");

                    b.HasIndex("OrgId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentClass");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentClassSubject", b =>
                {
                    b.Property<int>("StudentClassSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassSubjectId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("StudentClassId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("StudentClassSubjectId");

                    b.HasIndex("BatchId");

                    b.HasIndex("ClassSubjectId");

                    b.HasIndex("OrgId");

                    b.HasIndex("StudentClassId");

                    b.ToTable("StudentClassSubject");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentEvaluationAnswer", b =>
                {
                    b.Property<int>("StudentEvaluationAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<int>("ClassEvaluationAnswerOptionsId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("StudentEvaluationResultId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("StudentEvaluationAnswerId");

                    b.HasIndex("ClassEvaluationAnswerOptionsId");

                    b.HasIndex("StudentEvaluationResultId");

                    b.ToTable("StudentEvaluationAnswer");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentEvaluationResult", b =>
                {
                    b.Property<int>("StudentEvaluationResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<int?>("AnswerOptionsId")
                        .HasColumnType("int");

                    b.Property<string>("AnswerText")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("ClassEvaluationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EvaluationClassSubjectMapId")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("StudentClassId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentEvaluationResultId");

                    b.HasIndex("ClassEvaluationId");

                    b.HasIndex("EvaluationClassSubjectMapId");

                    b.ToTable("StudentEvaluationResult");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentFamilyNFriend", b =>
                {
                    b.Property<int>("StudentFamilyNFriendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int?>("RelationshipId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("SiblingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("StudentFamilyNFriendId");

                    b.HasIndex("OrgId");

                    b.HasIndex("SiblingId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentFamilyNFriend");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentFeeReceipt", b =>
                {
                    b.Property<int>("StudentFeeReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OffLineReceiptNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int?>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReceiptNo")
                        .HasColumnType("int");

                    b.Property<int>("StudentClassId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("StudentFeeReceiptId");

                    b.HasIndex("BatchId");

                    b.HasIndex("OrgId");

                    b.HasIndex("StudentClassId");

                    b.ToTable("StudentFeeReceipts");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentGrade", b =>
                {
                    b.Property<short>("StudentGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("BatchId")
                        .HasColumnType("smallint");

                    b.Property<int?>("ClassGroupId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("GradeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("GradeTypeId")
                        .HasColumnType("int");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<byte>("Sequence")
                        .HasColumnType("tinyint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("StudentGradeId");

                    b.HasIndex("GradeTypeId");

                    b.ToTable("StudentGrade");
                });

            modelBuilder.Entity("ttpMiddleware.Models.SubjectType", b =>
                {
                    b.Property<short>("SubjectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<short>("SelectHowMany")
                        .HasColumnType("smallint");

                    b.Property<string>("SubjectTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("SubjectTypeId");

                    b.ToTable("SubjectTypes");
                });

            modelBuilder.Entity("ttpMiddleware.Models.TaskAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ActualCompletion")
                        .HasColumnType("datetime");

                    b.Property<int>("AssignedByEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedToClassId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedToEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedToSectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AssignmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("AssignmentStatusId")
                        .HasColumnType("int");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("ExpectedCompletion")
                        .HasColumnType("datetime");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<byte?>("Score")
                        .HasColumnType("tinyint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssignedByEmployeeId");

                    b.HasIndex("AssignedToClassId");

                    b.HasIndex("AssignedToEmployeeId");

                    b.HasIndex("AssignmentStatusId");

                    b.HasIndex("OrgId");

                    b.ToTable("TaskAssignments");
                });

            modelBuilder.Entity("ttpMiddleware.Models.TaskAssignmentComment", b =>
                {
                    b.Property<int>("AssignmentCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("CommentedBy")
                        .HasColumnType("smallint");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<int>("TaskAssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AssignmentCommentId")
                        .HasName("PK_AssignmentComments");

                    b.HasIndex("OrgId");

                    b.HasIndex("TaskAssignmentId");

                    b.ToTable("TaskAssignmentComments");
                });

            modelBuilder.Entity("ttpMiddleware.Models.TaskConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("Action")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("AlertMessage")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<short?>("ApplicationId")
                        .HasColumnType("smallint");

                    b.Property<string>("ColNameNValue")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DBConnection")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastRun")
                        .HasColumnType("datetime");

                    b.Property<short?>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("TableName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaskName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserEmailForAlert")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.ToTable("TaskConfiguration");
                });

            modelBuilder.Entity("ttpMiddleware.Models.VariableConfiguration", b =>
                {
                    b.Property<short>("VariableConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<short>("ApplicationId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<byte>("DisplayOrder")
                        .HasColumnType("tinyint");

                    b.Property<short>("OrgId")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("VariableAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VariableDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("VariableFormula")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("VariableName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<short?>("VariableTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("VariableConfigurationId");

                    b.HasIndex("OrgId");

                    b.ToTable("VariableConfiguration");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ttpMiddleware.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ttpMiddleware.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ttpMiddleware.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ttpMiddleware.Models.AccountingLedgerTrialBalance", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("AccountingLedgerTrialBalances")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_Ledgers_Batches")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Employee")
                        .WithMany("AccountingLedgerTrialBalances")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Ledgers_EmpEmployeeId");

                    b.HasOne("ttpMiddleware.Models.GeneralLedger", "GeneralLedger")
                        .WithMany("AccountingLedgerTrialBalances")
                        .HasForeignKey("GeneralLedgerId")
                        .HasConstraintName("FK_Ledgers_GeneralLedgerId");

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("AccountingLedgerTrialBalances")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_Ledgers_OrganizationId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.StudentClass", "StudentClass")
                        .WithMany("AccountingLedgerTrialBalances")
                        .HasForeignKey("StudentClassId")
                        .HasConstraintName("FK_Ledgers_StudentClassId");

                    b.Navigation("Batch");

                    b.Navigation("Employee");

                    b.Navigation("GeneralLedger");

                    b.Navigation("Org");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("ttpMiddleware.Models.AccountingVoucher", b =>
                {
                    b.HasOne("ttpMiddleware.Models.ClassFee", "ClassFee")
                        .WithMany("AccountingVouchers")
                        .HasForeignKey("ClassFeeId")
                        .HasConstraintName("FK_AccountingVouchers_ClassFee");

                    b.HasOne("ttpMiddleware.Models.StudentFeeReceipt", "FeeReceipt")
                        .WithMany("AccountingVouchers")
                        .HasForeignKey("FeeReceiptId")
                        .HasConstraintName("FK_AccountingVouchers_StudentFeeReceipts");

                    b.HasOne("ttpMiddleware.Models.GeneralLedger", "GeneralLedgerAccount")
                        .WithMany("AccountingVouchers")
                        .HasForeignKey("GeneralLedgerAccountId")
                        .HasConstraintName("FK_AccountingVouchers_GeneralLedger");

                    b.HasOne("ttpMiddleware.Models.AccountingLedgerTrialBalance", "Ledger")
                        .WithMany("AccountingVouchers")
                        .HasForeignKey("LedgerId")
                        .HasConstraintName("FK_AccountingVouchers_AccountingLedgerTrialBalance")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("AccountingVouchers")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_AccountingVouchers_Organization")
                        .IsRequired();

                    b.Navigation("ClassFee");

                    b.Navigation("FeeReceipt");

                    b.Navigation("GeneralLedgerAccount");

                    b.Navigation("Ledger");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.AppUser", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("AppUsers")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_AppUsers_OrganizationOrgId");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ApplicationFeatureRolesPerm", b =>
                {
                    b.HasOne("ttpMiddleware.Models.PlanFeature", "PlanFeature")
                        .WithMany("ApplicationFeatureRolesPerms")
                        .HasForeignKey("PlanFeatureId")
                        .HasConstraintName("FK_ApplicationFeatureRolesPerm_PlanFeatures")
                        .IsRequired();

                    b.Navigation("PlanFeature");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ApplicationPrice", b =>
                {
                    b.HasOne("ttpMiddleware.Models.MasterItem", "Application")
                        .WithMany("ApplicationPriceApplications")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_ApplicationPrice_ApplicationPriceApplicationId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "Currency")
                        .WithMany("ApplicationPriceCurrencies")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_ApplicationPrice_MasterDataCurrencyId");

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("ApplicationPrices")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_ApplicationPrice_Organization")
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Currency");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.AspNetUserToken", b =>
                {
                    b.HasOne("ttpMiddleware.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Attendance", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("Attendances")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_Attendance_Batches");

                    b.HasOne("ttpMiddleware.Models.ClassSubject", "ClassSubject")
                        .WithMany("Attendances")
                        .HasForeignKey("ClassSubjectId")
                        .HasConstraintName("FK_Attendance_ClassSubject");

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("Attendances")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_Attendance_OrganizationId");

                    b.HasOne("ttpMiddleware.Models.StudentClass", "StudentClass")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentClassId")
                        .HasConstraintName("FK_Attendance_StudentClassId");

                    b.Navigation("Batch");

                    b.Navigation("ClassSubject");

                    b.Navigation("Org");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("ttpMiddleware.Models.AttendanceReport", b =>
                {
                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "AttendanceReportNavigation")
                        .WithOne("AttendanceReport")
                        .HasForeignKey("ttpMiddleware.Models.AttendanceReport", "AttendanceReportId")
                        .HasConstraintName("FK_AttendanceReports_EmpEmployees")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Batch", "FinancialYearNavigation")
                        .WithMany("AttendanceReports")
                        .HasForeignKey("FinancialYear")
                        .HasConstraintName("FK_AttendanceReports_BatchesFinancialYear")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("AttendanceReports")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_AttendanceReports_OrgId")
                        .IsRequired();

                    b.Navigation("AttendanceReportNavigation");

                    b.Navigation("FinancialYearNavigation");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Batch", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("Batches")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_Batches_Organization")
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassEvaluation", b =>
                {
                    b.HasOne("ttpMiddleware.Models.ClassEvaluationOption", "ClassEvaluationAnswerOptionParent")
                        .WithMany("ClassEvaluations")
                        .HasForeignKey("ClassEvaluationAnswerOptionParentId")
                        .HasConstraintName("FK_ClassEvaluation_ClassEvaluationOptions");

                    b.HasOne("ttpMiddleware.Models.EvaluationMaster", "EvaluationMaster")
                        .WithMany("ClassEvaluations")
                        .HasForeignKey("EvaluationMasterId")
                        .HasConstraintName("FK_ClassEvaluation_EvaluationName")
                        .IsRequired();

                    b.Navigation("ClassEvaluationAnswerOptionParent");

                    b.Navigation("EvaluationMaster");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassEvaluationOption", b =>
                {
                    b.HasOne("ttpMiddleware.Models.ClassEvaluation", "ClassEvaluation")
                        .WithMany("ClassEvaluationOptions")
                        .HasForeignKey("ClassEvaluationId")
                        .HasConstraintName("FK_ClassEvaluationOptions_ClassEvaluation");

                    b.Navigation("ClassEvaluation");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassFee", b =>
                {
                    b.HasOne("ttpMiddleware.Models.ClassMaster", "Class")
                        .WithMany("ClassFees")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_ClassFee_ClassMastersClassId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.FeeDefinition", "FeeDefinition")
                        .WithMany("ClassFees")
                        .HasForeignKey("FeeDefinitionId")
                        .HasConstraintName("FK_ClassFee_FeeDefinition")
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("FeeDefinition");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassGroupMapping", b =>
                {
                    b.HasOne("ttpMiddleware.Models.ClassMaster", "Class")
                        .WithMany("ClassGroupMappings")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_ClassGroupMapping_ClassMasters")
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassPrerequisite", b =>
                {
                    b.HasOne("ttpMiddleware.Models.ClassMaster", "Class")
                        .WithMany("ClassPrerequisites")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_ClassPrerequisites_ClassMasterClassId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("ClassPrerequisites")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_ClassPrerequisites_OrgId")
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassSubject", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_ClassSubject_Batches");

                    b.HasOne("ttpMiddleware.Models.ClassMaster", "Class")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_ClassSubject_ClassMasterClassId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_ClassSubject_OrganizationId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "Subject")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_ClassSubject_MasterDataSubjectsId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.SubjectType", "SubjectType")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("SubjectTypeId")
                        .HasConstraintName("FK_ClassSubject_SubjectTypesId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Teacher")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_ClassSubject_EmployeeTeacherId");

                    b.Navigation("Batch");

                    b.Navigation("Class");

                    b.Navigation("Org");

                    b.Navigation("Subject");

                    b.Navigation("SubjectType");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassSubjectMarkComponent", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("ClassSubjectMarkComponents")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_ClassSubjectMarkComponents_Batches")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.ClassSubject", "ClassSubject")
                        .WithMany("ClassSubjectMarkComponents")
                        .HasForeignKey("ClassSubjectId")
                        .HasConstraintName("FK_ClassSubjectMarkComponents_ClassSubjectId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("ClassSubjectMarkComponents")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_ClassSubjectMarkComponents_OrganizationId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "SubjectComponent")
                        .WithMany("ClassSubjectMarkComponents")
                        .HasForeignKey("SubjectComponentId")
                        .HasConstraintName("FK_ClassSubjectMarkComponents_MasterDataSubjectCompomentId")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("ClassSubject");

                    b.Navigation("Org");

                    b.Navigation("SubjectComponent");
                });

            modelBuilder.Entity("ttpMiddleware.Models.CourseYearSemester", b =>
                {
                    b.HasOne("ttpMiddleware.Models.ClassMaster", "Class")
                        .WithMany("CourseYearSemesters")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_CourseYearSemester_ClassMasters")
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ttpMiddleware.Models.CustomerInvoice", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Organization", "Customer")
                        .WithMany("CustomerInvoiceCustomers")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerInvoice_OrganizationCustomerId");

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("CustomerInvoiceOrgs")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_CustomerInvoice_Organization")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "PaymentStatus")
                        .WithMany("CustomerInvoices")
                        .HasForeignKey("PaymentStatusId")
                        .HasConstraintName("FK_CustomerInvoice_MasterDataPaymentStatus")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Org");

                    b.Navigation("PaymentStatus");
                });

            modelBuilder.Entity("ttpMiddleware.Models.CustomerInvoiceItem", b =>
                {
                    b.HasOne("ttpMiddleware.Models.CustomerPlan", "CustomerAppItem")
                        .WithMany("CustomerInvoiceItems")
                        .HasForeignKey("CustomerAppItemId")
                        .HasConstraintName("FK_CustomerInvoiceItems_AppItemId");

                    b.HasOne("ttpMiddleware.Models.CustomerInvoice", "CustomerInvoice")
                        .WithMany("CustomerInvoiceItems")
                        .HasForeignKey("CustomerInvoiceId")
                        .HasConstraintName("FK_CustomerInvoiceItems_CustomerInvoice")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.InventoryItem", "InventoryItem")
                        .WithMany("CustomerInvoiceItems")
                        .HasForeignKey("InventoryItemId")
                        .HasConstraintName("FK_CustomerInvoiceItems_InventoryId");

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("CustomerInvoiceItems")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_CustomerInvoiceItems_Organization")
                        .IsRequired();

                    b.Navigation("CustomerAppItem");

                    b.Navigation("CustomerInvoice");

                    b.Navigation("InventoryItem");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.CustomerPlan", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("CustomerPlans")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_CustomterPlans_Organization")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Plan", "Plan")
                        .WithMany("CustomerPlans")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK_CustomerPlans_PlanId")
                        .IsRequired();

                    b.Navigation("Org");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("ttpMiddleware.Models.CustomerPlanFeature", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Plan", "Plan")
                        .WithMany("CustomerPlanFeatures")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK_CustomerPlanFeatures_Plans")
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpComponent", b =>
                {
                    b.HasOne("ttpMiddleware.Models.MasterItem", "ComponentType")
                        .WithMany("EmpComponents")
                        .HasForeignKey("ComponentTypeId")
                        .HasConstraintName("FK_EmpComponents_ComponentType")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("EmpComponents")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_EmpComponents_OrganizationId")
                        .IsRequired();

                    b.Navigation("ComponentType");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpEmployeeGradeSalHistory", b =>
                {
                    b.HasOne("ttpMiddleware.Models.MasterItem", "Department")
                        .WithMany("EmpEmployeeGradeSalHistoryDepartments")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_EmpEmployeeGradeSalHistory_MasterItemDepartment")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "Designation")
                        .WithMany("EmpEmployeeGradeSalHistoryDesignations")
                        .HasForeignKey("DesignationId")
                        .HasConstraintName("FK_EmpEmployeeGradeSalHistory_MasterItemsDesignation");

                    b.HasOne("ttpMiddleware.Models.MasterItem", "EmpGrade")
                        .WithMany("EmpEmployeeGradeSalHistoryEmpGrades")
                        .HasForeignKey("EmpGradeId")
                        .HasConstraintName("FK_EmpEmployeeGradeSalHistory_MasterDataGradeId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Employee")
                        .WithMany("EmpEmployeeGradeSalHistoryEmployees")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmpEmployeeGradeSalHistory_EmpEmployees")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Manager")
                        .WithMany("EmpEmployeeGradeSalHistoryManagers")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_EmpEmployeeGradeSalHistory_EmpEmployeesManager");

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("EmpEmployeeGradeSalHistories")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_EmpEmployeeGradeSalHistory_OrganizationId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "WorkAccount")
                        .WithMany("EmpEmployeeGradeSalHistoryWorkAccounts")
                        .HasForeignKey("WorkAccountId")
                        .HasConstraintName("FK_EmpEmployeeGradeSalHistory_MasterDataWorkAccountId");

                    b.Navigation("Department");

                    b.Navigation("Designation");

                    b.Navigation("EmpGrade");

                    b.Navigation("Employee");

                    b.Navigation("Manager");

                    b.Navigation("Org");

                    b.Navigation("WorkAccount");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpEmployeeGroup", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("EmpEmployeeGroupOrgs")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_EmpEmployeeGroups_OrganizationOrgId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "SubOrg")
                        .WithMany("EmpEmployeeGroupSubOrgs")
                        .HasForeignKey("SubOrgId")
                        .HasConstraintName("FK_EmpEmployeeGroups_OrganizationSubOrgId");

                    b.Navigation("Org");

                    b.Navigation("SubOrg");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpEmployeeSalaryComponent", b =>
                {
                    b.HasOne("ttpMiddleware.Models.EmpComponent", "EmpComponent")
                        .WithMany("EmpEmployeeSalaryComponents")
                        .HasForeignKey("EmpComponentId")
                        .HasConstraintName("FK_EmpEmployeeSalaryComponents_ComponentId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Employee")
                        .WithMany("EmpEmployeeSalaryComponents")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeSalaryComponents_EmpEmployees")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("EmpEmployeeSalaryComponents")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_EmployeeSalaryComponents_Organization")
                        .IsRequired();

                    b.Navigation("EmpComponent");

                    b.Navigation("Employee");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpEmployeeSkill", b =>
                {
                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Employee")
                        .WithMany("EmpEmployeeSkills")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmpEmployeeSkills_EmpEmployees")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("EmpEmployeeSkills")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_EmpEmployeeSkills_Organization")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpWorkHistory", b =>
                {
                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Employee")
                        .WithMany("EmpWorkHistories")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmpWorkHistory_EmpEmployees");

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("EmpWorkHistories")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_EmpWorkHistory_OrganizationOrgId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmployeeActivity", b =>
                {
                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Employee")
                        .WithMany("EmployeeActivities")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeActivity_EmpEmployees")
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmployeeEducationHistory", b =>
                {
                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Employee")
                        .WithMany("EmployeeEducationHistories")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeEducationHistory_EmpEmployees")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("EmployeeEducationHistories")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_EmployeeEducationHistory_Organization")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmployeeEvaluationDetail", b =>
                {
                    b.HasOne("ttpMiddleware.Models.EmployeeEvaluation", "EmployeeEvaluation")
                        .WithMany("EmployeeEvaluationDetails")
                        .HasForeignKey("EmployeeEvaluationId")
                        .HasConstraintName("FK_EmployeeEvaluationDetail_EmployeeEvaluation");

                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Employee")
                        .WithMany("EmployeeEvaluationDetails")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeEvaluationDetail_EmpEmployees");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeEvaluation");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmployeeFamily", b =>
                {
                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Employee")
                        .WithMany("EmployeeFamilies")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeFamily_EmpEmployees")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "FamilyRelationShip")
                        .WithMany("EmployeeFamilyFamilyRelationShips")
                        .HasForeignKey("FamilyRelationShipId")
                        .HasConstraintName("FK_EmployeeFamily_MasterDataRelationshipId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "GenderNavigation")
                        .WithMany("EmployeeFamilyGenderNavigations")
                        .HasForeignKey("Gender")
                        .HasConstraintName("FK_EmployeeFamily_MasterDataGenderId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("EmployeeFamilies")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_EmployeeFamily_Organization")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("FamilyRelationShip");

                    b.Navigation("GenderNavigation");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmployeeMonthlySalary", b =>
                {
                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Employee")
                        .WithMany("EmployeeMonthlySalaries")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeMonthlySalary_EmpEmployees")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("EmployeeMonthlySalaries")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_EmployeeMonthlySalary_Organization")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EvaluationClassSubjectMap", b =>
                {
                    b.HasOne("ttpMiddleware.Models.MasterItem", "ClassGroup")
                        .WithMany("EvaluationClassSubjectMaps")
                        .HasForeignKey("ClassGroupId")
                        .HasConstraintName("FK_EvaluationMaster_Classgroup")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.EvaluationMaster", "EvaluationMaster")
                        .WithMany("EvaluationClassSubjectMaps")
                        .HasForeignKey("EvaluationMasterId")
                        .HasConstraintName("FK_EvaluationClassSubjectMap_EvaluationName")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("EvaluationClassSubjectMaps")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_OnlineEvaluation_Organization");

                    b.Navigation("ClassGroup");

                    b.Navigation("EvaluationMaster");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Event", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("Events")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_Event_Batches")
                        .IsRequired();

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Exam", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("Exams")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_Exams_BatchesBatchId");

                    b.HasOne("ttpMiddleware.Models.MasterItem", "ExamName")
                        .WithMany("Exams")
                        .HasForeignKey("ExamNameId")
                        .HasConstraintName("FK_Exams_MasterDataExamNameId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("Exams")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_Exams_OrganizationId")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("ExamName");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ExamSlot", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("ExamSlots")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_ExamSlot_Batches")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Exam", "Exam")
                        .WithMany("ExamSlots")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_ExamSlot_ExamsExamId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("ExamSlots")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_ExamSlot_OrganizationId")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Exam");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ExamStudentResult", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("ExamStudentResults")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_ExamStudentResult_Batches")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Exam", "Exam")
                        .WithMany("ExamStudentResults")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_ExamStudentClass_ExamsId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.StudentGrade", "GradeNavigation")
                        .WithMany("ExamStudentResults")
                        .HasForeignKey("Grade")
                        .HasConstraintName("FK_ExamStudentResult_StudentGrade");

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("ExamStudentResults")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_ExamStudentClass_OrganizationId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.StudentClass", "StudentClass")
                        .WithMany("ExamStudentResults")
                        .HasForeignKey("StudentClassId")
                        .HasConstraintName("FK_ExamStudentClass_ExamStudentClassId")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Exam");

                    b.Navigation("GradeNavigation");

                    b.Navigation("Org");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ExamStudentSubjectResult", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("ExamStudentSubjectResults")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_ExamStudentSubjectResult_Batches")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.ClassSubjectMarkComponent", "ClassSubjectMarkComponent")
                        .WithMany("ExamStudentSubjectResults")
                        .HasForeignKey("ClassSubjectMarkComponentId")
                        .HasConstraintName("FK_ExamStudentSubject_ClassSubjectMarkComponentId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Exam", "Exam")
                        .WithMany("ExamStudentSubjectResults")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_ExamStudentSubjectResult_ExamId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "ExamStatusNavigation")
                        .WithMany("ExamStudentSubjectResults")
                        .HasForeignKey("ExamStatus")
                        .HasConstraintName("FK_ExamStudentSubject_MasterDataStatus")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("ExamStudentSubjectResults")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_ExamStudentSubject_Organization")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.StudentClass", "StudentClass")
                        .WithMany("ExamStudentSubjectResults")
                        .HasForeignKey("StudentClassId")
                        .HasConstraintName("FK_ExamStudentSubjectResult_StudentClass")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.StudentClassSubject", "StudentClassSubject")
                        .WithMany("ExamStudentSubjectResults")
                        .HasForeignKey("StudentClassSubjectId")
                        .HasConstraintName("FK_ExamStudentSubject_StudentClassSubjectId")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("ClassSubjectMarkComponent");

                    b.Navigation("Exam");

                    b.Navigation("ExamStatusNavigation");

                    b.Navigation("Org");

                    b.Navigation("StudentClass");

                    b.Navigation("StudentClassSubject");
                });

            modelBuilder.Entity("ttpMiddleware.Models.FeeDefinition", b =>
                {
                    b.HasOne("ttpMiddleware.Models.MasterItem", "FeeCategory")
                        .WithMany("FeeDefinitions")
                        .HasForeignKey("FeeCategoryId")
                        .HasConstraintName("FK_FeeMaster_MasterItemsFeeTypeId")
                        .IsRequired();

                    b.Navigation("FeeCategory");
                });

            modelBuilder.Entity("ttpMiddleware.Models.GeneralLedger", b =>
                {
                    b.HasOne("ttpMiddleware.Models.MasterItem", "AccountGroup")
                        .WithMany("GeneralLedgerAccountGroups")
                        .HasForeignKey("AccountGroupId")
                        .HasConstraintName("FK_GeneralLedger_MasterItemsAccountgroup")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "AccountNature")
                        .WithMany("GeneralLedgerAccountNatures")
                        .HasForeignKey("AccountNatureId")
                        .HasConstraintName("FK_GeneralLedger_MasterItemsAccountNature")
                        .IsRequired();

                    b.Navigation("AccountGroup");

                    b.Navigation("AccountNature");
                });

            modelBuilder.Entity("ttpMiddleware.Models.InventoryItem", b =>
                {
                    b.HasOne("ttpMiddleware.Models.MasterItem", "Category")
                        .WithMany("InventoryItemCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_InventoryItems_MasterDataCategoryId");

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("InventoryItems")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_InventoryItems_Organization")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "Unit")
                        .WithMany("InventoryItemUnits")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_InventoryItems_MasterDataUnitId");

                    b.Navigation("Category");

                    b.Navigation("Org");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ttpMiddleware.Models.InvoiceComponent", b =>
                {
                    b.HasOne("ttpMiddleware.Models.MasterItem", "Component")
                        .WithMany("InvoiceComponents")
                        .HasForeignKey("ComponentId")
                        .HasConstraintName("FK_InvoiceComponents_InvoiceComponents")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.CustomerInvoice", "CustomerInvoice")
                        .WithMany("InvoiceComponents")
                        .HasForeignKey("CustomerInvoiceId")
                        .HasConstraintName("FK_InvoiceComponents_CustomerInvoice")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("InvoiceComponents")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_InvoiceComponents_Organization")
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("CustomerInvoice");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.LeaveBalance", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("LeaveBalances")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_LeaveBalances_BatchesFinancialYear")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Employee")
                        .WithMany("LeaveBalances")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_LeaveBalances_EmpEmployees")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.LeavePolicy", "LeavePolicy")
                        .WithMany("LeaveBalances")
                        .HasForeignKey("LeavePolicyId")
                        .HasConstraintName("FK_LeaveBalances_LeavePolicy")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("LeaveBalances")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_LeaveBalances_Organization")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Employee");

                    b.Navigation("LeavePolicy");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.LeaveEmployeeLeaf", b =>
                {
                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Employee")
                        .WithMany("LeaveEmployeeLeaves")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeLeaves_EmpEmployees")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "LeaveStatus")
                        .WithMany("LeaveEmployeeLeafLeaveStatuses")
                        .HasForeignKey("LeaveStatusId")
                        .HasConstraintName("FK_EmployeeLeaves_MasterDataLeaveStatus");

                    b.HasOne("ttpMiddleware.Models.MasterItem", "LeaveType")
                        .WithMany("LeaveEmployeeLeafLeaveTypes")
                        .HasForeignKey("LeaveTypeId")
                        .HasConstraintName("FK_EmployeeLeaves_MasterDataLeaveTypeId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("LeaveEmployeeLeaves")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_EmployeeLeaves_Organization")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("LeaveStatus");

                    b.Navigation("LeaveType");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.LeavePolicy", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("LeavePolicies")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_LeavePolicy_BatchesFinancialYear")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "LeaveName")
                        .WithMany("LeavePolicyLeaveNames")
                        .HasForeignKey("LeaveNameId")
                        .HasConstraintName("FK_LeavePolicy_MasterDataLeaveNameId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "LeaveOpenAdjustClose")
                        .WithMany("LeavePolicyLeaveOpenAdjustCloses")
                        .HasForeignKey("LeaveOpenAdjustCloseId")
                        .HasConstraintName("FK_LeavePolicy_MasterDataOpenAdjustClose")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("LeavePolicies")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_LeavePolicy_Organization")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("LeaveName");

                    b.Navigation("LeaveOpenAdjustClose");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.MasterItem", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("MasterItems")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_MasterData_Organization")
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Message", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("Messages")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_Messages_Organization")
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.OrganizationPayment", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("OrganizationPayments")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_OrgnizationPaymentDetails_Organization")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.CustomerPlan", "OrganizationPlan")
                        .WithMany("OrganizationPayments")
                        .HasForeignKey("OrganizationPlanId")
                        .HasConstraintName("FK_OrgnizationPaymentDetails_CustomerPlans")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "PaymentModeNavigation")
                        .WithMany("OrganizationPayments")
                        .HasForeignKey("PaymentMode")
                        .HasConstraintName("FK_OrgnizationPayment_MasterItemsPaymentmode")
                        .IsRequired();

                    b.Navigation("Org");

                    b.Navigation("OrganizationPlan");

                    b.Navigation("PaymentModeNavigation");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Page", b =>
                {
                    b.HasOne("ttpMiddleware.Models.MasterItem", "Application")
                        .WithMany("Pages")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_Pages_MasterDataApplicationId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("Pages")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_Pages_Organization");

                    b.Navigation("Application");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.PageHistory", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("PageHistories")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_PageHistory_Organization");

                    b.HasOne("ttpMiddleware.Models.Page", "ParentPage")
                        .WithMany("PageHistories")
                        .HasForeignKey("ParentPageId")
                        .HasConstraintName("FK_PageHistory_Pages")
                        .IsRequired();

                    b.Navigation("Org");

                    b.Navigation("ParentPage");
                });

            modelBuilder.Entity("ttpMiddleware.Models.PhotoGallery", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Album", "Album")
                        .WithMany("PhotoGalleries")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_PhotoGallery_Albums");

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("PhotoGalleries")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_PhotoGallery_Organization")
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.PlanAndMasterItem", b =>
                {
                    b.HasOne("ttpMiddleware.Models.MasterItem", "MasterData")
                        .WithMany("PlanAndMasterItems")
                        .HasForeignKey("MasterDataId")
                        .HasConstraintName("FK_PlanAndMasterData_MasterItems")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Plan", "Plan")
                        .WithMany("PlanAndMasterItems")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK_PlanAndMasterData_Plans")
                        .IsRequired();

                    b.Navigation("MasterData");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("ttpMiddleware.Models.PlanFeature", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Page", "Page")
                        .WithMany("PlanFeatures")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_PlanFeatures_Pages")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Plan", "Plan")
                        .WithMany("PlanFeatures")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK_PlanFeatures_Plans")
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("ttpMiddleware.Models.RefreshToken", b =>
                {
                    b.HasOne("ttpMiddleware.Models.AspNetUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ReportOrgReportColumn", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("ReportOrgReportColumns")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_ReportOrgReportColumns_Organization")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.ReportOrgReportName", "ReportOrgReportName")
                        .WithMany("ReportOrgReportColumns")
                        .HasForeignKey("ReportOrgReportNameId")
                        .HasConstraintName("FK_ReportOrgReportColumns_ReportOrgReports")
                        .IsRequired();

                    b.Navigation("Org");

                    b.Navigation("ReportOrgReportName");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ReportOrgReportName", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("ReportOrgReportNames")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_ReportOrgReports_Organization")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.ReportConfigItem", "ReportConfigData")
                        .WithMany("ReportOrgReportNames")
                        .HasForeignKey("ReportConfigDataId")
                        .HasConstraintName("FK_ReportOrgReports_ReportConfigurations")
                        .IsRequired();

                    b.Navigation("Org");

                    b.Navigation("ReportConfigData");
                });

            modelBuilder.Entity("ttpMiddleware.Models.RoleUser", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("RoleUsers")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_RoleUser_Batches");

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("RoleUsers")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_RoleUser_OrganizationId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RoleUser_MasterDataRoleId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.AspNetUser", "User")
                        .WithMany("RoleUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_RoleUser_AspNetUsers")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Org");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ttpMiddleware.Models.SchoolClassPeriod", b =>
                {
                    b.HasOne("ttpMiddleware.Models.ClassMaster", "Class")
                        .WithMany("SchoolClassPeriods")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_SchoolClassPeriods_ClassMasters")
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ttpMiddleware.Models.SchoolTimeTable", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("SchoolTimeTables")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_SchoolTimeTable_Batches")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.ClassMaster", "Class")
                        .WithMany("SchoolTimeTables")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_SchoolTimeTable_ClassMasters")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.ClassSubject", "ClassSubject")
                        .WithMany("SchoolTimeTables")
                        .HasForeignKey("ClassSubjectId")
                        .HasConstraintName("FK_SchoolTimeTable_ClassSubject")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("SchoolTimeTables")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_SchoolTimeTable_OrgId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.SchoolClassPeriod", "SchoolClassPeriod")
                        .WithMany("SchoolTimeTables")
                        .HasForeignKey("SchoolClassPeriodId")
                        .HasConstraintName("FK_SchoolTimeTable_SchoolClassPeriodId")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Class");

                    b.Navigation("ClassSubject");

                    b.Navigation("Org");

                    b.Navigation("SchoolClassPeriod");
                });

            modelBuilder.Entity("ttpMiddleware.Models.SlotAndClassSubject", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("SlotAndClassSubjects")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_SlotAndClassSubject_Batches")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.ClassSubject", "ClassSubject")
                        .WithMany("SlotAndClassSubjects")
                        .HasForeignKey("ClassSubjectId")
                        .HasConstraintName("FK_SlotAndClassSubject_ClassSubjectId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("SlotAndClassSubjects")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_SlotAndClassSubject_Organization")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.ExamSlot", "Slot")
                        .WithMany("SlotAndClassSubjects")
                        .HasForeignKey("SlotId")
                        .HasConstraintName("FK_SlotAndClassSubject_ExamSlot")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("ClassSubject");

                    b.Navigation("Org");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StorageFnP", b =>
                {
                    b.HasOne("ttpMiddleware.Models.MasterItem", "DocType")
                        .WithMany("StorageFnPs")
                        .HasForeignKey("DocTypeId")
                        .HasConstraintName("FK_FilesNPhotos_DocTypeId");

                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Employee")
                        .WithMany("StorageFnPs")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_StorageFnP_EmpEmployees");

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("StorageFnPs")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_FilesNPhotos_Organization");

                    b.HasOne("ttpMiddleware.Models.StudentClass", "StudentClass")
                        .WithMany("StorageFnPs")
                        .HasForeignKey("StudentClassId")
                        .HasConstraintName("FK_StorageFnP_StudentClass");

                    b.HasOne("ttpMiddleware.Models.Student", "Student")
                        .WithMany("StorageFnPs")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StorageFnP_Students");

                    b.Navigation("DocType");

                    b.Navigation("Employee");

                    b.Navigation("Org");

                    b.Navigation("Student");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudTeacherClassMapping", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("StudTeacherClassMappings")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_StudTeacherClassMapping_Batches")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.ClassMaster", "Class")
                        .WithMany("StudTeacherClassMappings")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_StudTeacherClassMapping_ClassMasterClassId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("StudTeacherClassMappings")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_StudTeacherClassMapping_Organization")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "Section")
                        .WithMany("StudTeacherClassMappings")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_StudTeacherClassMapping_MasterDataSectionId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "Teacher")
                        .WithMany("StudTeacherClassMappings")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_StudTeacherClassMapping_EmpEmployeesTeacherId")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Class");

                    b.Navigation("Org");

                    b.Navigation("Section");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Student", b =>
                {
                    b.HasOne("ttpMiddleware.Models.MasterItem", "Bloodgroup")
                        .WithMany("StudentBloodgroups")
                        .HasForeignKey("BloodgroupId")
                        .HasConstraintName("FK_Students_Bloodgroup");

                    b.HasOne("ttpMiddleware.Models.MasterItem", "Category")
                        .WithMany("StudentCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Students_Category");

                    b.HasOne("ttpMiddleware.Models.MasterItem", "Gender")
                        .WithMany("StudentGenders")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Students_Gender");

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("Students")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_Students_OrganizationOrgId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.MasterItem", "PermanentAddressCity")
                        .WithMany("StudentPermanentAddressCities")
                        .HasForeignKey("PermanentAddressCityId")
                        .HasConstraintName("FK_Students_City");

                    b.HasOne("ttpMiddleware.Models.MasterItem", "PermanentAddressCountry")
                        .WithMany("StudentPermanentAddressCountries")
                        .HasForeignKey("PermanentAddressCountryId")
                        .HasConstraintName("FK_Students_Country");

                    b.HasOne("ttpMiddleware.Models.MasterItem", "PermanentAddressState")
                        .WithMany("StudentPermanentAddressStates")
                        .HasForeignKey("PermanentAddressStateId")
                        .HasConstraintName("FK_Students_State");

                    b.HasOne("ttpMiddleware.Models.MasterItem", "ReasonForLeaving")
                        .WithMany("StudentReasonForLeavings")
                        .HasForeignKey("ReasonForLeavingId")
                        .HasConstraintName("FK_Students_ReasonForLeaving");

                    b.HasOne("ttpMiddleware.Models.MasterItem", "Religion")
                        .WithMany("StudentReligions")
                        .HasForeignKey("ReligionId")
                        .HasConstraintName("FK_Students_Religion");

                    b.Navigation("Bloodgroup");

                    b.Navigation("Category");

                    b.Navigation("Gender");

                    b.Navigation("Org");

                    b.Navigation("PermanentAddressCity");

                    b.Navigation("PermanentAddressCountry");

                    b.Navigation("PermanentAddressState");

                    b.Navigation("ReasonForLeaving");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentActivity", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("StudentActivities")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_StudentActivity_Batches");

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("StudentActivities")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_StudentActivity_OrganizationId");

                    b.HasOne("ttpMiddleware.Models.StudentClass", "StudentClass")
                        .WithMany("StudentActivities")
                        .HasForeignKey("StudentClassId")
                        .HasConstraintName("FK_StudentActivity_StudentClassId");

                    b.HasOne("ttpMiddleware.Models.Student", "Student")
                        .WithMany("StudentActivities")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentActivity_StudentId");

                    b.Navigation("Batch");

                    b.Navigation("Org");

                    b.Navigation("Student");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentCertificate", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("StudentCertificates")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_StudentCertificate_Batches")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("StudentCertificates")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_StudentCertificate_Organization")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.StudentClass", "StudentClass")
                        .WithMany("StudentCertificates")
                        .HasForeignKey("StudentClassId")
                        .HasConstraintName("FK_StudentCertificate_StudentClass")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Org");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentClass", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("StudentClasses")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_StudentClass_Batches")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.ClassMaster", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_StudentClass_ClassMaster")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.SchoolFeeType", "FeeType")
                        .WithMany("StudentClasses")
                        .HasForeignKey("FeeTypeId")
                        .HasConstraintName("FK_StudentClass_Feetype");

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("StudentClasses")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_StudentClass_OrganizationOrgId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Student", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentClass_Student")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Class");

                    b.Navigation("FeeType");

                    b.Navigation("Org");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentClassSubject", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("StudentClassSubjects")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_StudentClassSubject_BatchesBatchId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.ClassSubject", "ClassSubject")
                        .WithMany("StudentClassSubjects")
                        .HasForeignKey("ClassSubjectId")
                        .HasConstraintName("FK_StudentClassSubject_ClassSubjectId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("StudentClassSubjects")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_StudentClassSubject_OrganizationOrgId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.StudentClass", "StudentClass")
                        .WithMany("StudentClassSubjects")
                        .HasForeignKey("StudentClassId")
                        .HasConstraintName("FK_StudentClassSubject_StudentClassId")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("ClassSubject");

                    b.Navigation("Org");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentEvaluationAnswer", b =>
                {
                    b.HasOne("ttpMiddleware.Models.ClassEvaluationOption", "ClassEvaluationAnswerOptions")
                        .WithMany("StudentEvaluationAnswers")
                        .HasForeignKey("ClassEvaluationAnswerOptionsId")
                        .HasConstraintName("FK_StudentEvaluationAnswer_ClassEvaluationOptions")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.StudentEvaluationResult", "StudentEvaluationResult")
                        .WithMany("StudentEvaluationAnswers")
                        .HasForeignKey("StudentEvaluationResultId")
                        .HasConstraintName("FK_StudentEvaluation_StudentEvaluationResult")
                        .IsRequired();

                    b.Navigation("ClassEvaluationAnswerOptions");

                    b.Navigation("StudentEvaluationResult");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentEvaluationResult", b =>
                {
                    b.HasOne("ttpMiddleware.Models.ClassEvaluation", "ClassEvaluation")
                        .WithMany("StudentEvaluationResults")
                        .HasForeignKey("ClassEvaluationId")
                        .HasConstraintName("FK_StudentEvaluationResult_ClassEvaluation")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.EvaluationClassSubjectMap", "EvaluationClassSubjectMap")
                        .WithMany("StudentEvaluationResults")
                        .HasForeignKey("EvaluationClassSubjectMapId")
                        .HasConstraintName("FK_StudentEvaluationResult_EvaluationClassSubjectMap")
                        .IsRequired();

                    b.Navigation("ClassEvaluation");

                    b.Navigation("EvaluationClassSubjectMap");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentFamilyNFriend", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("StudentFamilyNFriends")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_StudentFamilyNFriend_Organization")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Student", "Sibling")
                        .WithMany("StudentFamilyNFriendSiblings")
                        .HasForeignKey("SiblingId")
                        .HasConstraintName("FK_StudentFamilyNFriend_SiblingId");

                    b.HasOne("ttpMiddleware.Models.Student", "Student")
                        .WithMany("StudentFamilyNFriendStudents")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentFamilyNFriend_Students")
                        .IsRequired();

                    b.Navigation("Org");

                    b.Navigation("Sibling");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentFeeReceipt", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Batch", "Batch")
                        .WithMany("StudentFeeReceipts")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_StudentFeeReceipts_Batches")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("StudentFeeReceipts")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_StudentFeeReceipts_Organization")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.StudentClass", "StudentClass")
                        .WithMany("StudentFeeReceipts")
                        .HasForeignKey("StudentClassId")
                        .HasConstraintName("FK_StudentFeeReceipts_StudentClass")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Org");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentGrade", b =>
                {
                    b.HasOne("ttpMiddleware.Models.MasterItem", "GradeType")
                        .WithMany("StudentGrades")
                        .HasForeignKey("GradeTypeId")
                        .HasConstraintName("FK_StudentGrade_MasterItems")
                        .IsRequired();

                    b.Navigation("GradeType");
                });

            modelBuilder.Entity("ttpMiddleware.Models.TaskAssignment", b =>
                {
                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "AssignedByEmployee")
                        .WithMany("TaskAssignmentAssignedByEmployees")
                        .HasForeignKey("AssignedByEmployeeId")
                        .HasConstraintName("FK_TaskAssignments_EmpEmployeesAssignedBy")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.StudentClass", "AssignedToClass")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("AssignedToClassId")
                        .HasConstraintName("FK_TaskAssignments_StudentClass");

                    b.HasOne("ttpMiddleware.Models.EmpEmployee", "AssignedToEmployee")
                        .WithMany("TaskAssignmentAssignedToEmployees")
                        .HasForeignKey("AssignedToEmployeeId")
                        .HasConstraintName("FK_TaskAssignments_EmpEmployeesAssignedTo");

                    b.HasOne("ttpMiddleware.Models.MasterItem", "AssignmentStatus")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("AssignmentStatusId")
                        .HasConstraintName("FK_TaskAssignments_MasterDataAssignmentStatusId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_TaskAssignments_Organization")
                        .IsRequired();

                    b.Navigation("AssignedByEmployee");

                    b.Navigation("AssignedToClass");

                    b.Navigation("AssignedToEmployee");

                    b.Navigation("AssignmentStatus");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.TaskAssignmentComment", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("TaskAssignmentComments")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_TaskAssignmentComments_OrgId")
                        .IsRequired();

                    b.HasOne("ttpMiddleware.Models.TaskAssignment", "TaskAssignment")
                        .WithMany("TaskAssignmentComments")
                        .HasForeignKey("TaskAssignmentId")
                        .HasConstraintName("FK_TaskAssignmentComments_TaskAssignments")
                        .IsRequired();

                    b.Navigation("Org");

                    b.Navigation("TaskAssignment");
                });

            modelBuilder.Entity("ttpMiddleware.Models.TaskConfiguration", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("TaskConfigurations")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_TaskConfiguration_OrganizationId");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.VariableConfiguration", b =>
                {
                    b.HasOne("ttpMiddleware.Models.Organization", "Org")
                        .WithMany("VariableConfigurations")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_VariableConfiguration_Organization")
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ttpMiddleware.Models.AccountingLedgerTrialBalance", b =>
                {
                    b.Navigation("AccountingVouchers");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Album", b =>
                {
                    b.Navigation("PhotoGalleries");
                });

            modelBuilder.Entity("ttpMiddleware.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserTokens");

                    b.Navigation("RefreshTokens");

                    b.Navigation("RoleUsers");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Batch", b =>
                {
                    b.Navigation("AccountingLedgerTrialBalances");

                    b.Navigation("AttendanceReports");

                    b.Navigation("Attendances");

                    b.Navigation("ClassSubjectMarkComponents");

                    b.Navigation("ClassSubjects");

                    b.Navigation("Events");

                    b.Navigation("Exams");

                    b.Navigation("ExamSlots");

                    b.Navigation("ExamStudentResults");

                    b.Navigation("ExamStudentSubjectResults");

                    b.Navigation("LeaveBalances");

                    b.Navigation("LeavePolicies");

                    b.Navigation("RoleUsers");

                    b.Navigation("SchoolTimeTables");

                    b.Navigation("SlotAndClassSubjects");

                    b.Navigation("StudentActivities");

                    b.Navigation("StudentCertificates");

                    b.Navigation("StudentClasses");

                    b.Navigation("StudentClassSubjects");

                    b.Navigation("StudentFeeReceipts");

                    b.Navigation("StudTeacherClassMappings");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassEvaluation", b =>
                {
                    b.Navigation("ClassEvaluationOptions");

                    b.Navigation("StudentEvaluationResults");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassEvaluationOption", b =>
                {
                    b.Navigation("ClassEvaluations");

                    b.Navigation("StudentEvaluationAnswers");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassFee", b =>
                {
                    b.Navigation("AccountingVouchers");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassMaster", b =>
                {
                    b.Navigation("ClassFees");

                    b.Navigation("ClassGroupMappings");

                    b.Navigation("ClassPrerequisites");

                    b.Navigation("ClassSubjects");

                    b.Navigation("CourseYearSemesters");

                    b.Navigation("SchoolClassPeriods");

                    b.Navigation("SchoolTimeTables");

                    b.Navigation("StudentClasses");

                    b.Navigation("StudTeacherClassMappings");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassSubject", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("ClassSubjectMarkComponents");

                    b.Navigation("SchoolTimeTables");

                    b.Navigation("SlotAndClassSubjects");

                    b.Navigation("StudentClassSubjects");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ClassSubjectMarkComponent", b =>
                {
                    b.Navigation("ExamStudentSubjectResults");
                });

            modelBuilder.Entity("ttpMiddleware.Models.CustomerInvoice", b =>
                {
                    b.Navigation("CustomerInvoiceItems");

                    b.Navigation("InvoiceComponents");
                });

            modelBuilder.Entity("ttpMiddleware.Models.CustomerPlan", b =>
                {
                    b.Navigation("CustomerInvoiceItems");

                    b.Navigation("OrganizationPayments");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpComponent", b =>
                {
                    b.Navigation("EmpEmployeeSalaryComponents");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmpEmployee", b =>
                {
                    b.Navigation("AccountingLedgerTrialBalances");

                    b.Navigation("AttendanceReport");

                    b.Navigation("ClassSubjects");

                    b.Navigation("EmpEmployeeGradeSalHistoryEmployees");

                    b.Navigation("EmpEmployeeGradeSalHistoryManagers");

                    b.Navigation("EmpEmployeeSalaryComponents");

                    b.Navigation("EmpEmployeeSkills");

                    b.Navigation("EmployeeActivities");

                    b.Navigation("EmployeeEducationHistories");

                    b.Navigation("EmployeeEvaluationDetails");

                    b.Navigation("EmployeeFamilies");

                    b.Navigation("EmployeeMonthlySalaries");

                    b.Navigation("EmpWorkHistories");

                    b.Navigation("LeaveBalances");

                    b.Navigation("LeaveEmployeeLeaves");

                    b.Navigation("StorageFnPs");

                    b.Navigation("StudTeacherClassMappings");

                    b.Navigation("TaskAssignmentAssignedByEmployees");

                    b.Navigation("TaskAssignmentAssignedToEmployees");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EmployeeEvaluation", b =>
                {
                    b.Navigation("EmployeeEvaluationDetails");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EvaluationClassSubjectMap", b =>
                {
                    b.Navigation("StudentEvaluationResults");
                });

            modelBuilder.Entity("ttpMiddleware.Models.EvaluationMaster", b =>
                {
                    b.Navigation("ClassEvaluations");

                    b.Navigation("EvaluationClassSubjectMaps");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Exam", b =>
                {
                    b.Navigation("ExamSlots");

                    b.Navigation("ExamStudentResults");

                    b.Navigation("ExamStudentSubjectResults");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ExamSlot", b =>
                {
                    b.Navigation("SlotAndClassSubjects");
                });

            modelBuilder.Entity("ttpMiddleware.Models.FeeDefinition", b =>
                {
                    b.Navigation("ClassFees");
                });

            modelBuilder.Entity("ttpMiddleware.Models.GeneralLedger", b =>
                {
                    b.Navigation("AccountingLedgerTrialBalances");

                    b.Navigation("AccountingVouchers");
                });

            modelBuilder.Entity("ttpMiddleware.Models.InventoryItem", b =>
                {
                    b.Navigation("CustomerInvoiceItems");
                });

            modelBuilder.Entity("ttpMiddleware.Models.LeavePolicy", b =>
                {
                    b.Navigation("LeaveBalances");
                });

            modelBuilder.Entity("ttpMiddleware.Models.MasterItem", b =>
                {
                    b.Navigation("ApplicationPriceApplications");

                    b.Navigation("ApplicationPriceCurrencies");

                    b.Navigation("ClassSubjectMarkComponents");

                    b.Navigation("ClassSubjects");

                    b.Navigation("CustomerInvoices");

                    b.Navigation("EmpComponents");

                    b.Navigation("EmpEmployeeGradeSalHistoryDepartments");

                    b.Navigation("EmpEmployeeGradeSalHistoryDesignations");

                    b.Navigation("EmpEmployeeGradeSalHistoryEmpGrades");

                    b.Navigation("EmpEmployeeGradeSalHistoryWorkAccounts");

                    b.Navigation("EmployeeFamilyFamilyRelationShips");

                    b.Navigation("EmployeeFamilyGenderNavigations");

                    b.Navigation("EvaluationClassSubjectMaps");

                    b.Navigation("Exams");

                    b.Navigation("ExamStudentSubjectResults");

                    b.Navigation("FeeDefinitions");

                    b.Navigation("GeneralLedgerAccountGroups");

                    b.Navigation("GeneralLedgerAccountNatures");

                    b.Navigation("InventoryItemCategories");

                    b.Navigation("InventoryItemUnits");

                    b.Navigation("InvoiceComponents");

                    b.Navigation("LeaveEmployeeLeafLeaveStatuses");

                    b.Navigation("LeaveEmployeeLeafLeaveTypes");

                    b.Navigation("LeavePolicyLeaveNames");

                    b.Navigation("LeavePolicyLeaveOpenAdjustCloses");

                    b.Navigation("OrganizationPayments");

                    b.Navigation("Pages");

                    b.Navigation("PlanAndMasterItems");

                    b.Navigation("RoleUsers");

                    b.Navigation("StorageFnPs");

                    b.Navigation("StudentBloodgroups");

                    b.Navigation("StudentCategories");

                    b.Navigation("StudentGenders");

                    b.Navigation("StudentGrades");

                    b.Navigation("StudentPermanentAddressCities");

                    b.Navigation("StudentPermanentAddressCountries");

                    b.Navigation("StudentPermanentAddressStates");

                    b.Navigation("StudentReasonForLeavings");

                    b.Navigation("StudentReligions");

                    b.Navigation("StudTeacherClassMappings");

                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Organization", b =>
                {
                    b.Navigation("AccountingLedgerTrialBalances");

                    b.Navigation("AccountingVouchers");

                    b.Navigation("ApplicationPrices");

                    b.Navigation("AppUsers");

                    b.Navigation("AttendanceReports");

                    b.Navigation("Attendances");

                    b.Navigation("Batches");

                    b.Navigation("ClassPrerequisites");

                    b.Navigation("ClassSubjectMarkComponents");

                    b.Navigation("ClassSubjects");

                    b.Navigation("CustomerInvoiceCustomers");

                    b.Navigation("CustomerInvoiceItems");

                    b.Navigation("CustomerInvoiceOrgs");

                    b.Navigation("CustomerPlans");

                    b.Navigation("EmpComponents");

                    b.Navigation("EmpEmployeeGradeSalHistories");

                    b.Navigation("EmpEmployeeGroupOrgs");

                    b.Navigation("EmpEmployeeGroupSubOrgs");

                    b.Navigation("EmpEmployeeSalaryComponents");

                    b.Navigation("EmpEmployeeSkills");

                    b.Navigation("EmployeeEducationHistories");

                    b.Navigation("EmployeeFamilies");

                    b.Navigation("EmployeeMonthlySalaries");

                    b.Navigation("EmpWorkHistories");

                    b.Navigation("EvaluationClassSubjectMaps");

                    b.Navigation("Exams");

                    b.Navigation("ExamSlots");

                    b.Navigation("ExamStudentResults");

                    b.Navigation("ExamStudentSubjectResults");

                    b.Navigation("InventoryItems");

                    b.Navigation("InvoiceComponents");

                    b.Navigation("LeaveBalances");

                    b.Navigation("LeaveEmployeeLeaves");

                    b.Navigation("LeavePolicies");

                    b.Navigation("MasterItems");

                    b.Navigation("Messages");

                    b.Navigation("OrganizationPayments");

                    b.Navigation("PageHistories");

                    b.Navigation("Pages");

                    b.Navigation("PhotoGalleries");

                    b.Navigation("ReportOrgReportColumns");

                    b.Navigation("ReportOrgReportNames");

                    b.Navigation("RoleUsers");

                    b.Navigation("SchoolTimeTables");

                    b.Navigation("SlotAndClassSubjects");

                    b.Navigation("StorageFnPs");

                    b.Navigation("StudentActivities");

                    b.Navigation("StudentCertificates");

                    b.Navigation("StudentClasses");

                    b.Navigation("StudentClassSubjects");

                    b.Navigation("StudentFamilyNFriends");

                    b.Navigation("StudentFeeReceipts");

                    b.Navigation("Students");

                    b.Navigation("StudTeacherClassMappings");

                    b.Navigation("TaskAssignmentComments");

                    b.Navigation("TaskAssignments");

                    b.Navigation("TaskConfigurations");

                    b.Navigation("VariableConfigurations");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Page", b =>
                {
                    b.Navigation("PageHistories");

                    b.Navigation("PlanFeatures");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Plan", b =>
                {
                    b.Navigation("CustomerPlanFeatures");

                    b.Navigation("CustomerPlans");

                    b.Navigation("PlanAndMasterItems");

                    b.Navigation("PlanFeatures");
                });

            modelBuilder.Entity("ttpMiddleware.Models.PlanFeature", b =>
                {
                    b.Navigation("ApplicationFeatureRolesPerms");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ReportConfigItem", b =>
                {
                    b.Navigation("ReportOrgReportNames");
                });

            modelBuilder.Entity("ttpMiddleware.Models.ReportOrgReportName", b =>
                {
                    b.Navigation("ReportOrgReportColumns");
                });

            modelBuilder.Entity("ttpMiddleware.Models.SchoolClassPeriod", b =>
                {
                    b.Navigation("SchoolTimeTables");
                });

            modelBuilder.Entity("ttpMiddleware.Models.SchoolFeeType", b =>
                {
                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("ttpMiddleware.Models.Student", b =>
                {
                    b.Navigation("StorageFnPs");

                    b.Navigation("StudentActivities");

                    b.Navigation("StudentClasses");

                    b.Navigation("StudentFamilyNFriendSiblings");

                    b.Navigation("StudentFamilyNFriendStudents");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentClass", b =>
                {
                    b.Navigation("AccountingLedgerTrialBalances");

                    b.Navigation("Attendances");

                    b.Navigation("ExamStudentResults");

                    b.Navigation("ExamStudentSubjectResults");

                    b.Navigation("StorageFnPs");

                    b.Navigation("StudentActivities");

                    b.Navigation("StudentCertificates");

                    b.Navigation("StudentClassSubjects");

                    b.Navigation("StudentFeeReceipts");

                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentClassSubject", b =>
                {
                    b.Navigation("ExamStudentSubjectResults");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentEvaluationResult", b =>
                {
                    b.Navigation("StudentEvaluationAnswers");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentFeeReceipt", b =>
                {
                    b.Navigation("AccountingVouchers");
                });

            modelBuilder.Entity("ttpMiddleware.Models.StudentGrade", b =>
                {
                    b.Navigation("ExamStudentResults");
                });

            modelBuilder.Entity("ttpMiddleware.Models.SubjectType", b =>
                {
                    b.Navigation("ClassSubjects");
                });

            modelBuilder.Entity("ttpMiddleware.Models.TaskAssignment", b =>
                {
                    b.Navigation("TaskAssignmentComments");
                });
#pragma warning restore 612, 618
        }
    }
}
